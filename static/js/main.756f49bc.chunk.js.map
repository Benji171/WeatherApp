{"version":3,"sources":["components/newsCard.js","App.js","serviceWorker.js","index.js"],"names":["NewsCard","props","className","href","url","Card","CardTitle","title","CardImg","src","image","CardText","description","author","weatherApi","newsApi","App","useState","background","setBackground","query","setQuery","weather","setWeather","news","setNews","console","log","type","placeholder","onChange","e","target","value","onKeyPress","day","month","year","key","Promise","all","fetch","then","json","res","articles","main","toLowerCase","catch","err","name","sys","country","d","getDay","date","getDate","getMonth","getFullYear","dateBuilder","Date","onClick","Math","round","temp_max","temp_min","coord","lat","lon","temp","humidity","wind","speed","feels_like","Container","map","article","indexOf","episode","urlToImage","source","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.756f49bc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardTitle, CardText, CardImg} from \"reactstrap\";\r\n\r\nexport default function NewsCard(props) {\r\n  return (\r\n    <a className=\"card-a\" href={props.url}>\r\n        <Card className=\"news-card\">\r\n        <CardTitle className=\"card-title\">{props.title}</CardTitle>\r\n        <CardImg className=\"card-img\" src={props.image}/>\r\n        <CardText  className=\"card-desc\">{props.description}</CardText>\r\n        <CardText className=\"card-source\">{props.author}</CardText>\r\n        <p>Learn More...</p>\r\n        </Card>\r\n    </a>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Container, Row } from \"reactstrap\";\nimport NewsCard from \".//components/newsCard\"\n\nconst weatherApi = {\n  key: '4f202515b8b40e20a36d3096794eeaa3',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nconst newsApi = {\n  key: '156880819301436db1e992e36ecc548e',\n  base: 'https://newsapi.org/v2/'\n}\n\nfunction App () {\n  const [background, setBackground] = useState('app-start')\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState('');\n  const [news, setNews] = useState([]);\n\n  const search = (e, day, month, year) => {\n    if (e.key === \"Enter\") {\n      Promise.all([\n        fetch(`${weatherApi.base}weather?q=${query}&units=metric&APPID=${weatherApi.key}`).then(value => value.json()),\n        fetch(`${newsApi.base}everything?q=${query}&from=${year}-${month}-${day}&sortBy=publishedAt&apiKey=${newsApi.key}`).then(value => value.json())\n      ]).then((res) => {\n          console.log(res);\n          setWeather(res[0]);\n          setNews(res[1].articles);\n          setBackground(`app-${res[0].weather[0].main.toLowerCase()}`);\n          setQuery('');\n      })\n      .catch(err => { console.log(err) });\n    }\n    else {}\n  }\n  console.log(background);\n  console.log(\"Weather\", weather);\n  console.log(\"News\", news);\n\n  const dateBuilder = (d) => {\n    let months= [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\n    \"August\",\"September\",\"October\",\"November\",\"December\"];\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  // function degreeToggle () {\n  //   if (document.querySelector(\"celcius\").innerHtml = \"°C\") {\n  //       document.querySelectorAll(\"tempSwitch\").innerHtml + 273;\n  //   }\n  // }\n\n  return (\n    <div  className={background}>\n     <main>\n\n       <div className=\"search-box\">\n         <input\n           type=\"text\"\n           className=\"search-bar\"\n           placeholder=\"Search...\"\n           onChange={e => setQuery(e.target.value)}\n           value={query}\n           onKeyPress={search}\n         />\n       </div>\n\n       {(typeof weather.main != \"undefined\") ? (\n         <div className=\"info-box\">\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n\n            <div className=\"weather-box\" onClick=\"degreeToggle\">\n              <div className=\"top-container\">\n                <div className=\"hi-stats\">H {Math.round(weather.main.temp_max)}°</div> \n                <div className=\"celcius\">°C</div>\n                <div className=\"lo-stats\">L {Math.round(weather.main.temp_min)}°</div>\n              </div>\n  \n              <div className=\"coordinates\">Lat: {Math.round(weather.coord.lat * 10) / 10} | Lon {Math.round(weather.coord.lon * 10) / 10}</div>\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}\n              </div>\n              <div className=\"humidity\">Humidity: {weather.main.humidity}%</div>\n\n              <div className=\"bottom-container\">\n                <div className=\"wind-speed\">Wind: {weather.wind.speed}KPH</div>\n                <div className=\"weather\">{weather.weather[0].main}</div>\n                <div className=\"feels-like\">Feels Like: {Math.round(weather.main.feels_like)}°</div>\n              </div>\n            </div>\n         </div>\n       ) : (\"\")}\n\n     </main>\n\n     <Container className=\"card-div\">\n        {news.map(article => {\n          if (news.indexOf(article) < 3) {\n            return (\n           \n                <NewsCard\n                  title = {article.title}\n                  episode = {article.description}\n                  url = {article.url}\n                  image = {article.urlToImage}\n                  source = {article.author}\n                />\n           \n            )\n          }\n          })}\n    </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}